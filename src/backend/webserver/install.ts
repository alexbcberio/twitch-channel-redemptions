import { createServer, logHttp, startServer, staticFileStream } from "./common";

import { ClientCredentialsAuthProvider } from "@twurple/auth";
import { FastifyRequest } from "fastify";
import axios from "axios";
import { bootstrap } from "..";
import { config as dotenvConfig } from "dotenv";
import { writeFile } from "fs/promises";

const env = {
  clientId: "",
  clientSecret: "",
};

async function createOAuthTokenData(
  code: string,
  req: FastifyRequest
): Promise<Record<string, string | Array<string>>> {
  const requestUri =
    "https://id.twitch.tv/oauth2/token" +
    `?client_id=${env.clientId}` +
    `&client_secret=${env.clientSecret}` +
    `&code=${code}` +
    `&grant_type=authorization_code` +
    `&redirect_uri=${req.protocol}://${req.hostname}/authenticate`;

  let response;

  try {
    response = await axios.post(requestUri);
  } catch (e) {
    throw new Error("Error creating OAuth token");
  }

  const data: Record<string, string | Array<string>> = {};

  for (const dataKey of Object.keys(response.data)) {
    const camelCaseKey: string = dataKey.replace(/_\w/g, (char: string) =>
      // eslint-disable-next-line no-magic-numbers
      char[1].toUpperCase()
    );
    data[camelCaseKey] = response.data[dataKey];
  }

  return data;
}

async function createEnvFile(
  clientId: string,
  clientSecret: string,
  channelName: string
) {
  const cwd = process.cwd();
  const encoding = "utf-8";

  await writeFile(
    `${cwd}/.env`,
    `# AUTOGENERATED FILE\n` +
      `# do not edit unless you know what you are doing!\n` +
      `TWITCH_CLIENT_ID=${clientId}\n` +
      `TWITCH_CLIENT_SECRET=${clientSecret}\n` +
      `TWITCH_CHANNEL_NAME=${channelName}\n`,
    {
      encoding,
    }
  );
}

async function createTokensFile(
  oauthToken: Record<string, string | Array<string>>
) {
  const cwd = process.cwd();
  const encoding = "utf-8";

  await writeFile(`${cwd}/tokens.json`, JSON.stringify(oauthToken), {
    encoding,
  });
}

async function install(): Promise<void> {
  logHttp("Starting in install mode");
  const server = createServer();

  server.setNotFoundHandler((_req, reply) => {
    reply.redirect("/install");
  });

  server.route({
    method: "GET",
    url: "/install",
    handler(req, reply) {
      reply.type("text/html").send(staticFileStream(`${req.url}.html`));
    },
  });

  server.route({
    method: "POST",
    url: "/setup-env",
    async handler(req, reply) {
      const noContent = 204;
      const badRequest = 400;

      const { clientId, clientSecret } = req.body as never;

      if (!clientId || !clientSecret) {
        reply.status(badRequest).send("Empty or missing parameters");
        return;
      }

      const auth = new ClientCredentialsAuthProvider(clientId, clientSecret);

      try {
        await auth.refresh();
      } catch (e) {
        reply
          .status(badRequest)
          .send("The clientId/clientSecret pair are not valid");
        return;
      }

      env.clientId = clientId;
      env.clientSecret = clientSecret;

      reply.status(noContent).send();
    },
  });

  server.route({
    method: "GET",
    url: "/authenticate",
    async handler(req, reply) {
      const { code } = req.query as never;

      if (!code) {
        const badRequest = 400;

        reply
          .status(badRequest)
          .send(
            'Missing "code" query parameter, have you accepted the permission request?'
          );
        return;
      }

      let oauthToken;
      try {
        oauthToken = await createOAuthTokenData(code, req);
      } catch (e) {
        const internalError = 500;

        let message = "";
        if (e instanceof Error) {
          message = e.message;
        }

        reply.status(internalError).send(message);
        return;
      }

      const user = await axios.get("https://id.twitch.tv/oauth2/validate", {
        headers: {
          Authorization: `Bearer ${oauthToken.accessToken}`,
        },
      });

      await Promise.all([
        await createEnvFile(env.clientId, env.clientSecret, user.data.login),
        await createTokensFile(oauthToken),
      ]);

      reply.type("text/html").send(staticFileStream("install-finished.html"));

      setImmediate(async () => {
        logHttp("Restarting server...");

        dotenvConfig();
        await server.close();

        bootstrap();
      });
    },
  });

  await startServer(server);
}

export { install };
